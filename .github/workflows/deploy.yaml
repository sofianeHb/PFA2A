name: Deploy Pipeline

on:
  workflow_run:
    workflows: ["ML Pipeline"]
    types:
      - completed
#Permission to download from another workflow
permissions:
  actions: read
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download mlruns from previous workflow
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: ml_pipeline.yml
        workflow_conclusion: success
        run-id: ${{ github.run_id }}
        name: mlruns
        path: mlruns/
        github-token: ${{ github.token }}
        check_artifacts: true

    - name: Download outputs from previous workflow
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: ml_pipeline.yml
        workflow_conclusion: success
        run_id: ${{ github.event.workflow_run.id }}
        name: outputs
        path: outputs/
        github_token: ${{ secrets.GITHUB_TOKEN }}
        check_artifacts: true

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build and run containers
      run: |
        docker-compose up -d --build
        sleep 10


    - name: Download and set up Ngrok
      run: |
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip
        unzip ngrok-stable-linux-amd64.zip
        sudo mv ngrok /usr/local/bin
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Start Ngrok tunnels
      run: |
        nohup ngrok http 8000 > ngrok_fastapi.log &
        nohup ngrok http 5000 > ngrok_mlflow.log &
        sleep 10

    - name: Show public URLs
      run: |
        curl http://localhost:4040/api/tunnels > tunnels.json
        echo "Public URLs:"
        cat tunnels.json | jq -r '.tunnels[] | .name + ": " + .public_url'
        sleep 150s

    - name: Check logs inside FastAPI container
      run: |
        CONTAINER_ID=$(docker ps -qf "name=fastapi")
        echo "FastAPI container ID: $CONTAINER_ID"
        docker exec $CONTAINER_ID ls -lah /app/logs
        docker exec $CONTAINER_ID cat /app/logs/predictions.log || echo "No log file inside container"
        


    - name: Check logs directory and file content
      run: |
        ls
        echo "Listing ./logs directory contents:"
        ls -lah ./logs || echo "Le dossier ./logs n'existe pas ou est vide"

        echo "Content of predictions.log:"
        if [ -f ./logs/predictions.log ]; then
          head -n 20 ./logs/predictions.log
        else
          echo "Le fichier predictions.log n'existe pas."
        fi

